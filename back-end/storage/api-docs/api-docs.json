{
    "openapi": "3.0.0",
    "info": {
        "title": "Laravel7CRUD OpenApi Documentation",
        "description": "Based on L5 Swagger package",
        "contact": {
            "email": "karasickdev@gmail.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8080/api",
            "description": "Local API Server"
        }
    ],
    "paths": {
        "/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login registered user",
                "description": "Returns authenticated user data",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCredentialsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthUserDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestException"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout authenticated post",
                "description": "Disable authenticated user token and returns no content",
                "operationId": "logoutUser",
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                }
            }
        },
        "/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register new user",
                "description": "Returns authenticated user data",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDataRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthUserDto"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/": {
            "get": {
                "description": "Home page",
                "operationId": "ac5f32eec336b092a10a014ae5e0d4ed",
                "responses": {
                    "default": {
                        "description": "Welcome page"
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "tags": [
                    "Posts"
                ],
                "summary": "Get limited list of posts with pagination",
                "description": "Returns limited list of posts with pagination information",
                "operationId": "getPostsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostPaginationDto"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Posts"
                ],
                "summary": "Store new post",
                "description": "Returns stored post data",
                "operationId": "storePost",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation Exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/posts/{id}": {
            "get": {
                "tags": [
                    "Posts"
                ],
                "summary": "Get post data",
                "description": "Returns post data",
                "operationId": "getPostById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Post id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Posts"
                ],
                "summary": "Update existing post",
                "description": "Returns updated post data",
                "operationId": "storePost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Post id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostDto"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    },
                    "422": {
                        "description": "Validation Exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationException"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Posts"
                ],
                "summary": "Delete existing post",
                "description": "Deletes a record and returns no content",
                "operationId": "deletePostById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Post id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "BadRequestException": {
                "title": "Bad Request Exception",
                "description": "Bad Request Exception response data",
                "properties": {
                    "message": {
                        "title": "message",
                        "description": "Validation Exception message",
                        "type": "string",
                        "example": "Data cannot be validated."
                    }
                },
                "type": "object"
            },
            "ValidationException": {
                "title": "Validation Exception",
                "description": "Validation Exception response data",
                "properties": {
                    "message": {
                        "title": "message",
                        "description": "Validation Exception message",
                        "type": "string",
                        "example": "Data cannot be validated."
                    },
                    "errors": {
                        "title": "errors",
                        "description": "Validation Exception errors",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "AuthUserDto": {
                "title": "AuthUser",
                "description": "Authenticated User DTO",
                "properties": {
                    "token": {
                        "title": "token",
                        "description": "User Access Token",
                        "type": "string",
                        "example": "token"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserDto"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "AuthUserDto"
                }
            },
            "UserDto": {
                "title": "User",
                "description": "User DTO",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Name",
                        "description": "Name of the user",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "title": "Email",
                        "description": "Email of the user",
                        "type": "string",
                        "example": "johndoe@mail.com"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "UserDto"
                }
            },
            "UserCredentialsRequest": {
                "title": "User Credentials Request",
                "description": "User Credentials request body data",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "title": "email",
                        "description": "Email of the registered user",
                        "type": "string",
                        "example": "johndoe@mail.com"
                    },
                    "password": {
                        "title": "password",
                        "description": "Password of the registered user",
                        "type": "string",
                        "example": "password1"
                    }
                },
                "type": "object"
            },
            "UserDataRequest": {
                "title": "User Data Request",
                "description": "User Data request body data",
                "required": [
                    "name",
                    "email",
                    "password",
                    "password_confirmation"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the user",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "title": "email",
                        "description": "Email of the user",
                        "type": "string",
                        "example": "johndoe@mail.com"
                    },
                    "password": {
                        "title": "password",
                        "description": "Password of the user",
                        "type": "string",
                        "example": "password1"
                    },
                    "password_confirmation": {
                        "title": "password_confirmation",
                        "description": "Password confirmation of the user",
                        "type": "string",
                        "example": "password1"
                    }
                },
                "type": "object"
            },
            "PostDto": {
                "title": "Post",
                "description": "Post DTO",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "user_id": {
                        "title": "User ID",
                        "description": "User's ID of the created post",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "title": {
                        "title": "Title",
                        "description": "Title of the post",
                        "type": "string",
                        "example": "A nice post"
                    },
                    "content": {
                        "title": "Content",
                        "description": "Content of the post",
                        "type": "string",
                        "example": "This is post's content"
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Created at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2022-02-14 15:02:22"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Updated at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2022-02-14 15:16:17"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PostDto"
                }
            },
            "PostPaginationDto": {
                "title": "Post List with Pagination",
                "description": "Post list DTO with pagination",
                "properties": {
                    "data": {
                        "title": "Post list",
                        "description": "List of posts at current page",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PostDto"
                        }
                    },
                    "current_page": {
                        "title": "Current page",
                        "description": "Current page of post list",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "per_page": {
                        "title": "Per page",
                        "description": "Amount of posts in list per page",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "to": {
                        "title": "To",
                        "description": "Last post's id number in post list",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "from": {
                        "title": "From",
                        "description": "First post's id number in post list",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "total": {
                        "title": "Total",
                        "description": "Total amount of posts",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PostPaginationDto"
                }
            },
            "PostStoreRequest": {
                "title": "Post Store Request",
                "description": "Post Store request body data",
                "required": [
                    "title",
                    "content"
                ],
                "properties": {
                    "title": {
                        "title": "title",
                        "description": "Title of the new post",
                        "type": "string",
                        "example": "A nice post"
                    },
                    "content": {
                        "title": "content",
                        "description": "Content of the new post",
                        "type": "string",
                        "example": "This is post's content."
                    }
                },
                "type": "object"
            }
        }
    },
    "tags": [
        {
            "name": "Posts",
            "description": "Posts API Endpoints"
        },
        {
            "name": "Auth",
            "description": "Auth API Endpoints"
        }
    ],
    "security": [
        []
    ]
}